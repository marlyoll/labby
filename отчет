Цель работы
Разработка программного инструмента для точного обнаружения всех стартовых позиций заданной подпоследовательности (подстроки) в геномной последовательности ДНК. Такая задача критически важна в биоинформатике и молекулярной биологии для:
Идентификации функциональных элементов ДНК (промоторов, генов, сайтов связывания белков).
Анализа повторяющихся последовательностей (тандемные повторы, транспозоны).
Поиска консервативных участков в сравнительной геномике.

Задачи
Реализация алгоритма поиска подстроки: Создать функцию, которая для строки s (геномная последовательность) и подстроки t (искомый мотив) возвращает список всех стартовых индексов, где t встречается в s.
Обработка входных данных:
Валидация ввода: проверка, что строки содержат только нуклеотиды A, T, C, G (регистронезависимая обработка).
Преобразование символов в единый регистр для унификации.
Визуализация результатов: Вывод позиций в формате, пригодном для дальнейшего анализа (например, интеграция с биоинформатическими пайплайнами).

Инструменты и методы
Программная реализация
Язык: Python 3.11 
Алгоритм: Метод полного перебора (brute-force).
Принцип работы: Последовательное сравнение каждой возможной подстроки s[i:i+m] с t (где m — длина t).

Ошибки 
Неэффективность для больших данных:
Проблема: Для генома человека (n ≈ 3×10⁹) время работы алгоритма неприемлемо.
Решение: Реализация алгоритма Кнута-Морриса-Пратта (KMP) или использование хеширования (Rabin-Karp).
Ограничения функционала:
Проблема: Отсутствие поддержки нечёткого поиска (учёт мутаций, инделов).
Решение: Интеграция алгоритмов с динамическим программированием (Smith-Waterman).

Выводы
Разработанная программа решает задачу поиска точных вхождений подстроки в ДНК, демонстрируя приемлемую производительность для малых и средних данных (n ≤ 10⁵).
Алгоритм может быть интегрирован в биоинформатические пайплайны как модуль предобработки.
Для масштабирования на полногеномные данные требуется переход к алгоритмам с линейной сложностью и параллельной обработке (MapReduce, CUDA).



